(window.webpackJsonp=window.webpackJsonp||[]).push([[9],{"Wd+X":function(e,t,n){"use strict";n.r(t),n.d(t,"_frontmatter",(function(){return a})),n.d(t,"default",(function(){return b}));n("yvkl"),n("abGl"),n("mXGw");var r=n("/FXl"),o=n("TjRS");n("aD51");function i(){return(i=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e}).apply(this,arguments)}function s(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}const a={};void 0!==a&&a&&a===Object(a)&&Object.isExtensible(a)&&!a.hasOwnProperty("__filemeta")&&Object.defineProperty(a,"__filemeta",{configurable:!0,value:{name:"_frontmatter",filename:"doc/tests.mdx"}});const c={_frontmatter:a},p=o.a;function b(e){let{components:t}=e,n=s(e,["components"]);return Object(r.b)(p,i({},c,n,{components:t,mdxType:"MDXLayout"}),Object(r.b)("h1",{id:"writing-tests"},"Writing tests"),Object(r.b)("h2",{id:"technologies-used"},"Technologies used"),Object(r.b)("p",null,"Since this app is React based, the most appropriate testing framework (at least\nwhen the tests were first written) is ",Object(r.b)("a",i({parentName:"p"},{href:"https://jestjs.io/"}),"Jest"),", associated\nwith the\n",Object(r.b)("a",i({parentName:"p"},{href:"https://testing-library.com/docs/react-testing-library/intro"}),"React Testing Library"),"."),Object(r.b)("p",null,"Of course, make sure you understand those frameworks before trying to write\ntests, they're pretty annoying sometimes, but there isn't many alternatives."),Object(r.b)("h2",{id:"test-structure"},"Test structure"),Object(r.b)("p",null,"Each test file must be placed alongside the code file it's supposed to test,\nand have the same name with a ",Object(r.b)("inlineCode",{parentName:"p"},".test")," before the ",Object(r.b)("inlineCode",{parentName:"p"},".js"),"."),Object(r.b)("p",null,"For exemple, if I want to create a test file to test ",Object(r.b)("inlineCode",{parentName:"p"},"exampleComponent.js")," in\nthe ",Object(r.b)("inlineCode",{parentName:"p"},"components/")," directory, i'll create the test file\n",Object(r.b)("inlineCode",{parentName:"p"},"exampleComponent.test.js")," in the same directory."),Object(r.b)("h2",{id:"running-tests"},"Running tests"),Object(r.b)("p",null,"To run tests, simply run the following command:"),Object(r.b)("pre",null,Object(r.b)("code",i({parentName:"pre"},{}),"npm run test\n")),Object(r.b)("p",null,"Feel free to read ",Object(r.b)("a",i({parentName:"p"},{href:"https://create-react-app.dev/docs/running-tests/"}),"this")," for\nmore information."),Object(r.b)("h2",{id:"continous-integration"},"Continous integration"),Object(r.b)("p",null,"At the time of writing this documentation, continous integration is\nsetup to trigger on push and pull request on the master branch.\nTry to write tests for every component you write to make the app more\nrobust."))}void 0!==b&&b&&b===Object(b)&&Object.isExtensible(b)&&!b.hasOwnProperty("__filemeta")&&Object.defineProperty(b,"__filemeta",{configurable:!0,value:{name:"MDXContent",filename:"doc/tests.mdx"}}),b.isMDXComponent=!0}}]);
//# sourceMappingURL=component---doc-tests-mdx-55e22b5506b52319572b.js.map