{"version":3,"sources":["webpack:///../doc/tests.mdx"],"names":["_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","props","mdxType","parentName","isMDXComponent"],"mappings":"g0BAMO,MAAMA,EAAe,Q,+LAE5B,MAKMC,EAAc,CAClBD,gBAEIE,EAAYC,IACH,SAASC,EAAT,GAGZ,IAHgC,WACjCC,GAEC,EADEC,EACF,oBACD,OAAO,YAACJ,EAAD,KAAeD,EAAiBK,EAAhC,CAAuCD,WAAYA,EAAYE,QAAQ,cAG5E,iBAAQ,CACN,GAAM,iBADR,iBAGA,iBAAQ,CACN,GAAM,qBADR,qBAGA,8IAA6H,mBAAGC,WAAW,KAAQ,CAC/I,KAAQ,uBADiH,QAA7H,yBAE2C,mBAAGA,WAAW,KAAQ,CAC7D,KAAQ,iEAD+B,yBAF3C,+JAMA,iBAAQ,CACN,GAAM,kBADR,kBAGA,mIAAkH,0BAAYA,WAAW,KAAvB,SAAlH,eAAmL,0BAAYA,WAAW,KAAvB,OAAnL,2DACmD,0BAAYA,WAAW,KAAvB,uBADnD,WAC8H,0BAAYA,WAAW,KAAvB,eAD9H,2CACiO,0BAAYA,WAAW,KAAvB,4BADjO,2BAEA,iBAAQ,CACN,GAAM,iBADR,iBAGA,wEACA,uBAAK,sBAAMA,WAAW,OAAU,IAA3B,mBAEL,0CAAyB,mBAAGA,WAAW,KAAQ,CAC3C,KAAQ,qDADa,QAAzB,0BAGA,iBAAQ,CACN,GAAM,mBADR,iBAGA,iBAAQ,CACN,GAAM,WADR,WAGA,mEAAkD,0BAAYA,WAAW,KAAvB,yBAAlD,qCAAyJ,0BAAYA,WAAW,KAAvB,0BAAzJ,gHAEA,iBAAQ,CACN,GAAM,kBADR,kBAGA,+FAA8E,0BAAYA,WAAW,KAAvB,cAA9E,KAA0I,0BAAYA,WAAW,KAAvB,aAA1I,kOAEA,iBAAQ,CACN,GAAM,0BADR,0BAGA,kP,6LAMJJ,EAAWK,gBAAiB","file":"component---doc-tests-mdx-542606c4549b7da35bf5.js","sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\n\nimport DefaultLayout from \"/home/runner/work/plant-3d-explorer/plant-3d-explorer/node_modules/gatsby-theme-docz/src/base/Layout.js\";\nexport const _frontmatter = {};\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1 {...{\n      \"id\": \"writing-tests\"\n    }}>{`Writing tests`}</h1>\n    <h2 {...{\n      \"id\": \"technologies-used\"\n    }}>{`Technologies used`}</h2>\n    <p>{`Since this app is React based, the most appropriate testing framework (at least when the tests were first written) is `}<a parentName=\"p\" {...{\n        \"href\": \"https://jestjs.io/\"\n      }}>{`Jest`}</a>{`, associated with the `}<a parentName=\"p\" {...{\n        \"href\": \"https://testing-library.com/docs/react-testing-library/intro\"\n      }}>{`React Testing Library`}</a>{`.\nOf course, make sure you understand those frameworks before trying to write tests, they're pretty annoying sometimes, but there isn't many alternatives.`}</p>\n    <h2 {...{\n      \"id\": \"test-structure\"\n    }}>{`Test structure`}</h2>\n    <p>{`Each test file must be placed alongside the code file it's supposed to test, and have the same name with a `}<inlineCode parentName=\"p\">{`.test`}</inlineCode>{` before the `}<inlineCode parentName=\"p\">{`.js`}</inlineCode>{`.\nFor example, if I want to create a test file to test `}<inlineCode parentName=\"p\">{`exampleComponent.js`}</inlineCode>{` in the `}<inlineCode parentName=\"p\">{`components/`}</inlineCode>{` directory, I will create the test file `}<inlineCode parentName=\"p\">{`exampleComponent.test.js`}</inlineCode>{` in the same directory.`}</p>\n    <h2 {...{\n      \"id\": \"running-tests\"\n    }}>{`Running tests`}</h2>\n    <p>{`To run tests, simply run the following command:`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`npm run test\n`}</code></pre>\n    <p>{`Feel free to read `}<a parentName=\"p\" {...{\n        \"href\": \"https://create-react-app.dev/docs/running-tests/\"\n      }}>{`this`}</a>{` for more information.`}</p>\n    <h2 {...{\n      \"id\": \"writing-tests-1\"\n    }}>{`Writing tests`}</h2>\n    <h3 {...{\n      \"id\": \"imports\"\n    }}>{`Imports`}</h3>\n    <p>{`To test things, don't use the imports from `}<inlineCode parentName=\"p\">{`react-testing-library`}</inlineCode>{`, but import those functions from `}<inlineCode parentName=\"p\">{`rd/tools/test-utils.js`}</inlineCode>{`.\nThe reason is that this import has a wrapper instead, which ensures the components are renders correctly.`}</p>\n    <h3 {...{\n      \"id\": \"good-practices\"\n    }}>{`Good practices`}</h3>\n    <p>{`When writing tests, try to reuse code as much as possible by using the `}<inlineCode parentName=\"p\">{`beforeEach`}</inlineCode>{`, `}<inlineCode parentName=\"p\">{`beforeAll`}</inlineCode>{`, and other functions provided by Jest.\nUse describe blocks to organize tests in logical parts (of course, you don't need to use describe blocks if it's very small tests, or if it doesn't make a lot of sense to use them).`}</p>\n    <h2 {...{\n      \"id\": \"continuous-integration\"\n    }}>{`Continuous integration`}</h2>\n    <p>{`At the time of writing this documentation, continuous integration is setup to trigger on push and pull request on the master branch.\nTry to write tests for every component you write to make the app more robust.`}</p>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"sourceRoot":""}